{"version":3,"sources":["../../source/renderer/server.js"],"names":[],"mappings":";;;;;;;;kBAYe,UAAS,GAAT,EAAc,MAAd,EAAsB,MAAtB,EAA8B,IAA9B,EAAoC;;AAEjD,MAAI,WAAW,EAAf;;;AAGA,MAAI,OAAO,OAAO;AAAA;IAAA;IAAA;AAAA,GAAlB;;;AAGA,SAAO;AAAA;IAAA,EAAU,UAAU,QAApB;IAA+B;AAA/B,GAAP;;;AAGA,mBAAS,cAAT,CAAwB,IAAxB;;;AAGA,UAAQ,GAAR,CAAY,QAAZ,EAAsB,IAAtB,CAA2B,YAAM;;AAE/B,QAAM,OAAO,iBAAS,cAAT,CAAwB,IAAxB,CAAb;;;AAGA,QAAM,OAAO,sBAAO,MAAP,EAAb;;;AAGA,QAAI,OAAO,8BAAC,IAAD,IAAM,MAAM,IAAZ,EAAkB,MAAM,IAAxB,EAA8B,QAAQ,MAAtC,EAA8C,QAAQ,MAAtD,GAAX;;;AAGA,QAAI,SAAS,sBAAsB,iBAAS,oBAAT,CAA8B,IAA9B,CAAnC;;;AAGA,QAAI,IAAJ,EAAU;AACR,WAAK,IAAL,EAAW,MAAX,EAAmB,IAAnB;AACD;AACF,GAjBD,EAiBG,KAjBH,CAiBS,UAAC,GAAD,EAAS;AAChB,SAAK,GAAL;AACD,GAnBD;AAoBD,C;;AA9CD;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoDM,I;;;;;;;;;;;6BAQK;AAAA,mBAC8B,KAAK,KADnC;AAAA,UACA,IADA,UACA,IADA;AAAA,UACM,MADN,UACM,MADN;AAAA,UACc,MADd,UACc,MADd;AAAA,UACsB,IADtB,UACsB,IADtB;;AAEP,UAAM,QAAQ,KAAK,cAAL,CAAoB,WAApB,EAAd;AACA,UAAM,eAAe,SAAS,0CAAQ,KAAK,MAAb,EAAqB,MAAK,iBAA1B,EAA4C,WAA5C,EAAkD,SAAQ,OAA1D,GAAT,GAAgF,IAArG;;AAEA,aACE;AAAA;QAAU,KAAV;QACE;AAAA;UAAA;UACG,KAAK,IAAL,CAAU,WAAV,EADH;UAEG,KAAK,KAAL,CAAW,WAAX,EAFH;UAGG,KAAK,IAAL,CAAU,WAAV,EAHH;UAIG,KAAK,IAAL,CAAU,WAAV,EAJH;UAKG,KAAK,MAAL,CAAY,WAAZ,EALH;UAMG,KAAK,KAAL,CAAW,WAAX;AANH,SADF;QASE;AAAA;UAAA;UACE,uCAAK,IAAG,SAAR,EAAkB,yBAAyB;AAC7C,sBAAQ;AADqC,aAA3C,GADF;UAIG,OAAO,IAAP,CAAY,MAAZ,EAAoB,GAApB,CAAwB,UAAC,GAAD;AAAA,mBAAS,0CAAQ,KAAK,GAAb,EAAkB,yBAAyB;AAC7E,qCAAmB,GAAnB,WAA4B,KAAK,SAAL,CAAe,OAAO,GAAP,GAAf,CAA5B;AAD6E,eAA3C,EAEjC,SAAQ,OAFyB,GAAT;AAAA,WAAxB,CAJH;UAOG;AAPH;AATF,OADF;AAqBD;;;;;;AAlCG,I,CACG,S,GAAY;AACjB,QAAM,iBAAU,MADC;AAEjB,QAAM,iBAAU,MAFC;AAGjB,UAAQ,iBAAU,MAHD;AAIjB,UAAQ,iBAAU;AAJD,C","file":"server.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom/server';\nimport Helmet from 'react-helmet';\nimport { Store, Promises } from './components';\n\n/**\n/* Render a universal App on the server\n/* @ App - the root React element.\n/* @ state - object of {key:fn} states to load into window[key] = fn() \n/* @ script - location of script file\n/* @ next - callback from ReactDOM.render\n/*/\nexport default function(App, states, script, next) {\n\n  let promises = [];\n\n  // Set the body to be wrapped\n  let Body = App || <div>App Missing</div>;\n\n  // Send our promises reference through the context\n  Body = <Promises promises={promises}>{Body}</Promises>;\n\n  // This initial render will grab all the promises we need from any initial async calls\n  ReactDOM.renderToString(Body);\n\n  // We then need to wait for all promises to finish and re-render with the state it generated!\n  Promise.all(promises).then(() => {\n    // Re-render the body with the new state\n    const body = ReactDOM.renderToString(Body);\n\n    // Get the current head\n    const head = Helmet.rewind();\n\n    // And by magic the re-render of the body should have the store pre-loaded with the results from the promises!\n    let html = <Html body={body} head={head} states={states} script={script} />;\n\n    // Render html\n    let markup = '<!doctype html>\\n' + ReactDOM.renderToStaticMarkup(html);\n\n    // Call the callback\n    if (next) {\n      next(null, markup, head);\n    }\n  }).catch((err) => {\n    next(err);\n  });\n}\n\n/**\n * Wrapper component for generating server response\n * @ body - body string to render\n * @ head - Helmet head components\n * @ state - state to serialize and sync for client side render\n * @ script - the react app script to place after the body tag\n */\nclass Html extends Component {\n  static propTypes = {\n    body: PropTypes.string,\n    head: PropTypes.object,\n    states: PropTypes.object,\n    script: PropTypes.string,\n  };\n\n  render() {\n    const {body, states, script, head} = this.props;\n    const attrs = head.htmlAttributes.toComponent();\n    const clientScript = script ? <script src={script} type=\"text/javascript\" defer charSet=\"UTF-8\" /> : null;\n    \n    return (\n      <html {...attrs}>\n        <head>\n          {head.base.toComponent()}\n          {head.title.toComponent()}\n          {head.meta.toComponent()}\n          {head.link.toComponent()}\n          {head.script.toComponent()}\n          {head.style.toComponent()}\n        </head>\n        <body>\n          <div id=\"content\" dangerouslySetInnerHTML={{\n        __html: body\n      }}/>          \n          {Object.keys(states).map((key) => <script key={key} dangerouslySetInnerHTML={{\n          __html: `window[\"${key}\"]=${JSON.stringify(states[key]())};`\n        }} charSet=\"UTF-8\"/>)}\n          {clientScript}\n        </body>\n      </html>\n      );\n  }\n}"]}